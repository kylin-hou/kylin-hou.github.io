<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>道生一</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-06T06:22:00.283Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kylin Hou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>世界那么大我想去看</title>
    <link href="http://yoursite.com/2016/07/06/%E4%B8%96%E7%95%8C%E9%82%A3%E4%B9%88%E5%A4%A7%E6%88%91%E6%83%B3%E5%8E%BB%E7%9C%8B%E7%9C%8B/"/>
    <id>http://yoursite.com/2016/07/06/世界那么大我想去看看/</id>
    <published>2016-07-06T05:58:33.073Z</published>
    <updated>2016-07-06T06:22:00.283Z</updated>
    
    <content type="html">&lt;p&gt;世界那么大，我想去看看。这里分享最新的hosts，已经还不错的免费梯子。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本人推荐使用hosts，采用这种方式基本的科学上网已经足够，我也就用一下谷歌搜索，fb和youtube基本是不上的，这一种方式的缺点是有时候youtube视频不能播放。相比用软件好处就是对与不需要翻·墙的网站一点影响也没有，使用很多的软件会影响平时的上网速度。&lt;/p&gt;
&lt;p&gt;Windows 系统hosts位于 C:\Windows\System32\drivers\etc\hosts&lt;br&gt;所以方法非常简单，只需要把相关的文件替换即可，也可以把相应的ip地址写到源文件中。&lt;/p&gt;
&lt;p&gt;最新hosts下载&lt;/p&gt;
&lt;p&gt;更新日期2016.7.3&lt;br&gt;[&lt;a href=&quot;http://pan.baidu.com/s/1pLzUkB5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我下载&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;除了使用hosts之外，也可以使用一些工具，推荐一个蓝灯，一听名字就知道照亮前方的路，电脑手机都有，手机的自己下载吧，这里提供电脑版，双击安装完之后什么都不用管，一键傻瓜式科学上网。&lt;br&gt;&lt;a href=&quot;http://pan.baidu.com/s/1dFgBJK9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点我下载&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;世界那么大，我想去看看。这里分享最新的hosts，已经还不错的免费梯子。&lt;br&gt;
    
    </summary>
    
      <category term="分享" scheme="http://yoursite.com/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>将整个hexo博客系统原始文件上传到github</title>
    <link href="http://yoursite.com/2016/07/06/%E5%B0%86%E6%95%B4%E4%B8%AAhexo%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E4%B8%8A%E4%BC%A0%E5%88%B0github/"/>
    <id>http://yoursite.com/2016/07/06/将整个hexo博客系统上传到github/</id>
    <published>2016-07-06T04:26:22.638Z</published>
    <updated>2016-07-06T05:32:41.598Z</updated>
    
    <content type="html">&lt;h2 id=&quot;这是个引子&quot;&gt;&lt;a href=&quot;#这是个引子&quot; class=&quot;headerlink&quot; title=&quot;这是个引子&quot;&gt;&lt;/a&gt;这是个引子&lt;/h2&gt;&lt;p&gt;将博客弄得基本差不多了之后忽然发现一个问题，使用hexo deploy命令部署在github上的博客仅仅是hexo系统将执行hexo g之后把md文件转换为静态html之后的文件，（这句话怎么说的这么长~） 那如果某一天电脑崩了，或者是文件丢失了，我们只能从github上弄回这些html文件，我们的这个hexo博客系统是找不回的，菊花一紧！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这怎么可以，既然有github，我们就要充分利用起来嘛，接下来将整个博客系统的原始文件也弄到github的一个仓库中。&lt;/p&gt;
&lt;h2 id=&quot;几个git命令解析&quot;&gt;&lt;a href=&quot;#几个git命令解析&quot; class=&quot;headerlink&quot; title=&quot;几个git命令解析&quot;&gt;&lt;/a&gt;几个git命令解析&lt;/h2&gt;&lt;p&gt;git init //在当前项目目录中生成本地git管理,并建立一个隐藏.git目录。使用这个命令创建的仓库不是裸仓库，而是在当前目录下生成.git目录，该目录为仓库；而当前目录为工作空间。&lt;/p&gt;
&lt;p&gt;git add . //添加当前目录中的所有文件到索引。git add命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。&lt;/p&gt;
&lt;p&gt;git commit -m “注释” //提交到本地源码库，并附加提交注释。git commit命令，将索引内容添加到仓库中。如果我们这里不用-m参数的话，git将调到一个文本编译器（通常是vim）来让你输入提交的描述信息&lt;/p&gt;
&lt;p&gt;git commit -a -m “提交的描述信息”&lt;br&gt;git commit 命令的-a 选项可只将所有被修改或者已删除的且已经被git管理的文档提交倒仓库中。如果只是修改或者删除了已被Git 管理的文档，是没必要使用git add 命令的。&lt;/p&gt;
&lt;p&gt;git remote add origin 仓库地址 //添加到远程项目，别名为origin。git remote是添加一个远程仓库。&lt;/p&gt;
&lt;p&gt;git push -u origin master //把本地源码库push到github 别名为origin的远程项目中，确认提交，git push -u origin master第一次推送master分支的所有内容。此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改&lt;/p&gt;
&lt;h2 id=&quot;开始操作&quot;&gt;&lt;a href=&quot;#开始操作&quot; class=&quot;headerlink&quot; title=&quot;开始操作&quot;&gt;&lt;/a&gt;开始操作&lt;/h2&gt;&lt;h3 id=&quot;为本地hexo文件生成git管理&quot;&gt;&lt;a href=&quot;#为本地hexo文件生成git管理&quot; class=&quot;headerlink&quot; title=&quot;为本地hexo文件生成git管理&quot;&gt;&lt;/a&gt;为本地hexo文件生成git管理&lt;/h3&gt;&lt;p&gt;进入hexo博客的根目录，然后git bash here。在命令行中输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候将会发现，文件夹中多了一个.git的隐藏文件夹，第一步完成。&lt;/p&gt;
&lt;h3 id=&quot;添加所有文件到索引&quot;&gt;&lt;a href=&quot;#添加所有文件到索引&quot; class=&quot;headerlink&quot; title=&quot;添加所有文件到索引&quot;&gt;&lt;/a&gt;添加所有文件到索引&lt;/h3&gt;&lt;p&gt;继续在命令行中输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add . 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意这个 .  这样就会将所有的文件加到索引中&lt;/p&gt;
&lt;h3 id=&quot;提交到本地源码库&quot;&gt;&lt;a href=&quot;#提交到本地源码库&quot; class=&quot;headerlink&quot; title=&quot;提交到本地源码库&quot;&gt;&lt;/a&gt;提交到本地源码库&lt;/h3&gt;&lt;p&gt;继续输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;first commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就把索引中的所有东西都提交到了本地的源码库中了，提交的注释为：first commit&lt;/p&gt;
&lt;h3 id=&quot;新建远程仓库&quot;&gt;&lt;a href=&quot;#新建远程仓库&quot; class=&quot;headerlink&quot; title=&quot;新建远程仓库&quot;&gt;&lt;/a&gt;新建远程仓库&lt;/h3&gt;&lt;p&gt;到自己的github上，新建一个仓库，仓库的名字随便起，我起了一个hexoBlogFile，拷贝一下这个仓库的地址，下一步使用&lt;/p&gt;
&lt;h3 id=&quot;添加到远程项目&quot;&gt;&lt;a href=&quot;#添加到远程项目&quot; class=&quot;headerlink&quot; title=&quot;添加到远程项目&quot;&gt;&lt;/a&gt;添加到远程项目&lt;/h3&gt;&lt;p&gt;在面板中输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin https://github.com/xxxx  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面改成你自己的地址就可以了，这样就把本地的代码块与远程仓库连接起来了&lt;/p&gt;
&lt;h3 id=&quot;将本地源码库push到远程仓库&quot;&gt;&lt;a href=&quot;#将本地源码库push到远程仓库&quot; class=&quot;headerlink&quot; title=&quot;将本地源码库push到远程仓库&quot;&gt;&lt;/a&gt;将本地源码库push到远程仓库&lt;/h3&gt;&lt;p&gt;继续输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成本地库push到远程仓库&lt;/p&gt;
&lt;h3 id=&quot;后续的代码更新&quot;&gt;&lt;a href=&quot;#后续的代码更新&quot; class=&quot;headerlink&quot; title=&quot;后续的代码更新&quot;&gt;&lt;/a&gt;后续的代码更新&lt;/h3&gt;&lt;p&gt;以后文件修改了之后，需要不断的更新，只需要如下几个代码就可以了，先进入所在文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .
git commit -m &amp;quot;update test&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这是个引子&quot;&gt;&lt;a href=&quot;#这是个引子&quot; class=&quot;headerlink&quot; title=&quot;这是个引子&quot;&gt;&lt;/a&gt;这是个引子&lt;/h2&gt;&lt;p&gt;将博客弄得基本差不多了之后忽然发现一个问题，使用hexo deploy命令部署在github上的博客仅仅是hexo系统将执行hexo g之后把md文件转换为静态html之后的文件，（这句话怎么说的这么长~） 那如果某一天电脑崩了，或者是文件丢失了，我们只能从github上弄回这些html文件，我们的这个hexo博客系统是找不回的，菊花一紧！&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>开启markdown之旅</title>
    <link href="http://yoursite.com/2016/07/05/%E5%BC%80%E5%90%AFmarkdown%E4%B9%8B%E6%97%85/"/>
    <id>http://yoursite.com/2016/07/05/开启markdown之旅/</id>
    <published>2016-07-05T03:12:26.252Z</published>
    <updated>2016-07-06T05:39:18.112Z</updated>
    
    <content type="html">&lt;h2 id=&quot;markdown编辑器&quot;&gt;&lt;a href=&quot;#markdown编辑器&quot; class=&quot;headerlink&quot; title=&quot;markdown编辑器&quot;&gt;&lt;/a&gt;markdown编辑器&lt;/h2&gt;&lt;p&gt;所话说欲先攻其器，必先利其器，为了能更好的快速进行markdown的使用和写作，匆匆看完markdown的基本语法之后就开始搜罗windows平台的编辑器，Linux我还是吃不消啊，真是惭愧。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;markdownPad2 ：下载了一个绿色版，但是发现预览功能失败，搜了一下发现在win10平台很多人都这样，需要下载一个插件，100M多点，由于校园网网速问题还没下载成功。&lt;/li&gt;
&lt;li&gt;小书匠编辑器 ：看了很多的编辑器感觉都大同小异，知乎上一人推荐了这个编辑器，有web版，正在试用，感觉不错。下载了离线版，感觉不错。但是界面不好看，启动速度太慢。&lt;/li&gt;
&lt;li&gt;在windows的应用商店发现了一个uwp的markdown编辑器，名字就是markdown uwp使用了一下真不错，但是有几个不足点，不能使用CTRL+C保存，只能点击保存按钮，开发者是陈关州，于是搜了一下发现还有桌面版的，功能更加强大，名字是markdownEditor，现在正在试用，感觉要比小书匠来的舒服。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;markdown的基本语法&quot;&gt;&lt;a href=&quot;#markdown的基本语法&quot; class=&quot;headerlink&quot; title=&quot;markdown的基本语法&quot;&gt;&lt;/a&gt;markdown的基本语法&lt;/h2&gt;&lt;p&gt;markdown语法确实简单，下面简单介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制各级标题 # ## ###&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hexo中为一篇文章添加多个标签：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tags: [markdown,博客,编辑]
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;markdown编辑器&quot;&gt;&lt;a href=&quot;#markdown编辑器&quot; class=&quot;headerlink&quot; title=&quot;markdown编辑器&quot;&gt;&lt;/a&gt;markdown编辑器&lt;/h2&gt;&lt;p&gt;所话说欲先攻其器，必先利其器，为了能更好的快速进行markdown的使用和写作，匆匆看完markdown的基本语法之后就开始搜罗windows平台的编辑器，Linux我还是吃不消啊，真是惭愧。&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="编辑" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>github + hexo 博客搭建 2016-6-30</title>
    <link href="http://yoursite.com/2016/07/05/github-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/07/05/github-hexo博客搭建/</id>
    <published>2016-07-05T01:45:15.364Z</published>
    <updated>2016-07-06T05:30:12.740Z</updated>
    
    <content type="html">&lt;h2 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h2&gt;&lt;p&gt;git的相关教程非常多，这里就不赘述了&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;node-js安装&quot;&gt;&lt;a href=&quot;#node-js安装&quot; class=&quot;headerlink&quot; title=&quot;node.js安装&quot;&gt;&lt;/a&gt;node.js安装&lt;/h2&gt;&lt;p&gt;去官网下载 &lt;a href=&quot;http://nodejs.org/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.org/download/&lt;/a&gt; ，之后安装，我使用了默认安装路径&lt;/p&gt;
&lt;h2 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h2&gt;&lt;p&gt;在电脑的屏幕上右键（随便选择桌面上就行），选择Git Bash Here ，然后出现终端界面，输入npm install -g hexo&lt;br&gt;回车之后等待，但是出错，报错如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm WARN optional Skipping failed optional dependency /hexo/chokidar/fsevents:&lt;br&gt;npm WARN notsup Not compatible with your operating system or architecture: fsevents@1.0.12&lt;br&gt;npm ERR! Windows_NT 10.0.10586&lt;br&gt;npm ERR! argv “C:\Program Files\nodejs\node.exe” “C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js” “install” “-g” “hexo”&lt;br&gt;npm ERR! node v6.2.2&lt;br&gt;npm ERR! npm  v3.9.5&lt;br&gt;npm ERR! shasum check failed for C:\Users\kylin\AppData\Local\Temp\npm-12620-bfae7f80\registry.npmjs.org\JSONStream-\JSONStream-1.1.3.tgz&lt;br&gt;npm ERR! Expected: 1b296c7949b47e4fc22ac7958f76d2fbe2415493&lt;br&gt;npm ERR! Actual:   46eb6043a766a9b5f25d516cd21373227d912302&lt;br&gt;npm ERR! From:     &lt;a href=&quot;https://registry.npmjs.org/JSONStream/-/JSONStream-1.1.3.tgz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://registry.npmjs.org/JSONStream/-/JSONStream-1.1.3.tgz&lt;/a&gt;&lt;br&gt;npm ERR!&lt;br&gt;npm ERR! If you need help, you may report this error at:&lt;br&gt;npm ERR!     &lt;a href=&quot;https://github.com/npm/npm/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/npm/npm/issues&lt;/a&gt;&lt;br&gt;npm ERR! Please include the following file with any support request:&lt;br&gt;npm ERR!     C:\Users\kylin\Desktop\npm-debug.log&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;出错的原因不明白，尝试各种解决方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将安装好的最新版卸载掉，重新下载了稳定版v4.4.4安装重试&lt;/li&gt;
&lt;li&gt;以管理员身份运行Git Bash，然后再输入npm install -g hexo，成功！！！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建一个文件夹，保存自己的hexo网站，在文件夹内右键，选择Git Bash Here ，输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo init
npm install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入hexo server，出现下图的话表示hexo运行成功&lt;/p&gt;
&lt;p&gt;![hexo运行成功][1]&lt;/p&gt;
&lt;p&gt;浏览器访问 &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000&lt;/a&gt; ，看一下会有什么效果&lt;/p&gt;
&lt;h2 id=&quot;开始Github&quot;&gt;&lt;a href=&quot;#开始Github&quot; class=&quot;headerlink&quot; title=&quot;开始Github&quot;&gt;&lt;/a&gt;开始Github&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;github账号以前已经注册过，直接使用&lt;/li&gt;
&lt;li&gt;建立一个仓库，与用户名对应的仓库，仓库名必须为『your_user_name.github.io』&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将本地的ssh-key复制到github上&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;你的github注册邮箱&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 然后一直回车，直到出现&lt;/p&gt;
&lt;p&gt; ![enter description here][2]&lt;br&gt; 查看电脑中以前的ssh-key，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ~/.ssh/ &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 如果结果为： id_rsa  id_rsa.pub继续进行，输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 将会显示出SSH-KEY，复制内容粘贴到github的ssh中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在hexo目录中有一个  config.yml 文件, 在其最后补全如下信息：&lt;br&gt;   deploy:&lt;br&gt;   type: git&lt;br&gt;   repo: &lt;a href=&quot;https://github.com/yourname/yourname.github.io.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yourname/yourname.github.io.git&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;branch: master
执行

     hexo deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   出错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ERROR Deployer not found: git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 找到解决方案：&lt;br&gt; 需要先安装hexo-deployer-git，然后将github修改为git&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 之后重新执行hexo deploy&lt;br&gt; 弹出一个对话框，输入github账户名和密码，完成之后，成功将本地的hexo文件上传到github&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在使用ssh连接github的时候一直不成功，输入ssh -T git@github.com显示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh -T git@github.com
The authenticity of host &amp;apos;github.com (192.30.253.112)&amp;apos; can&amp;apos;t be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)?
Host key verification failed.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;尝试了很多次依然是不管用，发现这个问题有点白痴，要在Are you sure you want to continue connecting (yes/no)?这句话后面填上yes，回车才能成功！！！！&lt;/p&gt;
&lt;h2 id=&quot;使用GitHub-Pages建立博客&quot;&gt;&lt;a href=&quot;#使用GitHub-Pages建立博客&quot; class=&quot;headerlink&quot; title=&quot;使用GitHub Pages建立博客&quot;&gt;&lt;/a&gt;使用GitHub Pages建立博客&lt;/h2&gt;&lt;p&gt;在搜索hexo的相关资料的时候发现了next主题，所以首先使用next主题看一下效果，next的地址为 &lt;a href=&quot;http://theme-next.iissnan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://theme-next.iissnan.com/&lt;/a&gt;&lt;br&gt;上面有详细的配置说明，可以把主题设置的更加适合自己。&lt;/p&gt;
&lt;h4 id=&quot;发表新文章&quot;&gt;&lt;a href=&quot;#发表新文章&quot; class=&quot;headerlink&quot; title=&quot;发表新文章&quot;&gt;&lt;/a&gt;发表新文章&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;hexo new “文章标题”（可以简写new为n）&lt;/li&gt;
&lt;li&gt;我喜欢直接在source_posts文件夹下新建一个.md文件，效果是一样的，或者把在其他地方写好的md文件直接拷贝过来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后继续 hexo g，hexo d，文章就部署好了&lt;/p&gt;
&lt;h4 id=&quot;删除文章&quot;&gt;&lt;a href=&quot;#删除文章&quot; class=&quot;headerlink&quot; title=&quot;删除文章&quot;&gt;&lt;/a&gt;删除文章&lt;/h4&gt;&lt;p&gt;删除文章非常简单，直接把相应的.md文件在删除，然后执行hexo g，hexo d就OK了&lt;/p&gt;
&lt;h4 id=&quot;首页显示文章摘要&quot;&gt;&lt;a href=&quot;#首页显示文章摘要&quot; class=&quot;headerlink&quot; title=&quot;首页显示文章摘要&quot;&gt;&lt;/a&gt;首页显示文章摘要&lt;/h4&gt;&lt;p&gt;在next主题使用说明中有说明，一共三种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在文章中使用 &lt;!-- more --&gt; 手动进行截断，Hexo 提供的方式 &lt;strong&gt;推荐&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在文章的 front-matter 中添加 description，并提供文章摘录&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动形成摘要，在 主题配置文件 中添加：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auto_excerpt:
  enable: true
  length: 150
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认截取的长度为 150 字符，可以根据需要自行设定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议使用 &lt;!-- more --&gt;（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。&lt;/p&gt;
&lt;h4 id=&quot;添加独立域名&quot;&gt;&lt;a href=&quot;#添加独立域名&quot; class=&quot;headerlink&quot; title=&quot;添加独立域名&quot;&gt;&lt;/a&gt;添加独立域名&lt;/h4&gt;&lt;p&gt;很早之前就买了一个域名，kylin10.com,但是确一直没有用起来，之前的博客网站放在新浪云SAE上，域名没有备案无法绑定，SAE的费用也是越来越高，用完了云豆就来折腾github了。&lt;/p&gt;
&lt;p&gt;将github与自己的域名绑定只需下面几部：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Hexo的source目录下新建一个CNAME文件，里面写上自己的域名，注意前面不要加www等内容，直接写kylin10.com，完成之后deploy&lt;/li&gt;
&lt;li&gt;注册&lt;a href=&quot;https://www.dnspod.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DNSpod&lt;/a&gt;，添加域名,可以按照下图设置：&lt;br&gt;&lt;img src=&quot;http://cnfeat.qiniudn.com/15.png&quot; alt=&quot;图片描述&quot;&gt;&lt;br&gt;图片来自&lt;a href=&quot;http://www.jianshu.com/p/05289a4bc8b2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/05289a4bc8b2/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3.在购买域名的管理中心修改域名对应的dns&lt;/p&gt;
&lt;h4 id=&quot;同时部署至github和Coding&quot;&gt;&lt;a href=&quot;#同时部署至github和Coding&quot; class=&quot;headerlink&quot; title=&quot;同时部署至github和Coding&quot;&gt;&lt;/a&gt;同时部署至github和Coding&lt;/h4&gt;&lt;p&gt;同时将博客部署到github跟coding上，可以参考这个教程 &lt;a href=&quot;http://sanwen8.cn/p/1a0TJhT.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://sanwen8.cn/p/1a0TJhT.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;但是有一点需要注意：&lt;/p&gt;
&lt;p&gt;在给coding上添加ssh的时候要选择个人公钥！！！，默认的是公开公钥，第一次我没有注意，添加之后git一直出错。&lt;/p&gt;
&lt;h4 id=&quot;站内搜索&quot;&gt;&lt;a href=&quot;#站内搜索&quot; class=&quot;headerlink&quot; title=&quot;站内搜索&quot;&gt;&lt;/a&gt;站内搜索&lt;/h4&gt;&lt;p&gt;不知道为什么，站内搜索一直失败，还在努力中&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h2&gt;&lt;p&gt;git的相关教程非常多，这里就不赘述了&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客搭建" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
